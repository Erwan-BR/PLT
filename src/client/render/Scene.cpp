// Generated by AMillasseau


#include "Scene.h"

namespace render {

	/// @brief Empty constructor of the Scene class.
    Scene::Scene (){
       	//Creation and initialisation of the background texture
    	this->background_texture =sf::Texture();
    	(this->background_texture).loadFromFile("../resources/img/background.png");

    	//Creation and initialisation of the background sprite
    	this->background=sf::Sprite();
    	(this->background).setTexture(this->background_texture);

    	//Set Starting Window
    	this->current_window = MAIN_WINDOW;

    	/*TODO PlayerRenderer*/
    }

    /// @brief Full constructor of the Scene class.
    /// @param game Pointer on the Game coresponding to this Renderer
    Scene::Scene (state::Game* game){
    	//Storage of the Game Class
		this->game = game;

		//Creation and initialisation of the background texture
		this->background_texture = sf::Texture();
		(this->background_texture).loadFromFile("../resources/img/background.png");

		//Creation and initialisation of the background sprite
		this->background=sf::Sprite();
		(this->background).setTexture(this->background_texture);

		//Set Starting Window
		this->current_window = MAIN_WINDOW;

		/*std::vector<state::Player*> p = (this->game)->getPlayers();
		for (int i=0;i<p.size();i++){
			player_renderer.push_back(new PlayerRenderer(p[i],i));
		}*/
	}

    /// @brief Full destructor of the Scene class.
    Scene::~Scene (){

    }

    /// @brief Getter of the background sprite.
    /// @return The sprite corresponding of the background of the scene
    sf::Sprite Scene::getBackground (){
    	return (this->background);
    }

    /// @brief Getter of the player renderer.
    /// @param index corresponding of the wanted player renderer in the vector player_renderer
	/// @return The player renderer corresponding of the index.
	PlayerRenderer* Scene::getPlayerRenderer (int index){
		return ((this->player_renderer)[index]);
	}

	void Scene::changeWindow(Window window){
		this->current_window = window;
	}

	Window Scene::getWindow(){
		return (this->current_window);
	}
};
